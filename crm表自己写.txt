from django.db import models

# Create your models here.

from django.contrib.auth.models import  User
#自带的用户认证

class Userprofile(models.Model):
    #用户信息表
    user=models.ForeignKey(User,on_delete=models.CASCADE)
    name=models.CharField(max_length=64,verbose_name='姓名')
    role=models.ManyToManyField('Role',blank=True,null=True)
    #双向一对多,可以为空，blank

    def __str__(self):
        return self.name



class Role(models.Model):
    #角色表
    name=models.CharField(max_length=64,unique=True)


class CustomerInfo(models.Model):
    #客户信息表
 #第一个咨询的不会告诉名字
    name=models.CharField(max_length=64,default=None)
    qq=models.CharField(max_length=64,unique=True)
    #客户通过qq来咨询的
    contact_type_choice=((0,'qq'),(1,'微信'),(2,'手机'))
    contact_type=models.SmallIntegerField(choices=contact_type_choice,default=0)
    contact=models.CharField(max_length=64,unique=True)
#唯一,联系
    source_choice=((0,'QQ群'),
                   (1,'51cto'),
                   (2,'百度推广'),
                   (3,'知乎'),
                   (4,'转介绍'),
                   (5,'其他')
                   )
    #客户知道这个培训机构的来源
    referral_from=models.ForeignKey('self',blank=True,null=True,verbose_name='转介绍',on_delete=models.CASCADE)
    #这个是转介绍，可以关联自己，转介绍人必需是已经培训过的，在来推荐其他人过来，self也可以写这个表名
    consult_course=models.ManyToManyField('course',verbose_name='咨询课程')
    consult_content=models.TextField(verbose_name='咨询内容')
    data=models.DateField(auto_now_add=True)
    #自增，时间
    status_choice=((0,'未报名'),(1,'已报名'),(2,'已退学'))
    #上课2周后不满意，退学
    consultant=models.ForeignKey('Userprofile',verbose_name='课程顾问',on_delete=models.CASCADE)
#这个客户的咨询的那个客服
class Student(models.Model):
    #学员表，已经报名的
    customer=models.ForeignKey('CustomerInfo',on_delete=models.CASCADE)
    class_grade=models.ManyToManyField('Classlist')
    #一个学员可以报名多个班级
    def __str__(self):
        return  self.customer


class CustomerFollowup(models.Model):
    #客户跟踪记录
    customer=models.ForeignKey('CustomerInfo',on_delete=models.CASCADE)
    content=models.TextField(verbose_name='跟踪内容')
    user=models.ForeignKey('Userprofile',verbose_name='跟进人',on_delete=models.CASCADE)
    statue_choice=((0,'近期无报名计划'),
                   (1,'一个月内报名'),
                   (2,'不知道'),
                   (3,'已经'),)


class Course(models.Model):
    #课程表
    name=models.CharField(verbose_name='课程名称',max_length=64,unique=True)
    price=models.PositiveIntegerField()
    #这个价格必需为正整数,不能超过65555
    period=models.PositiveSmallIntegerField(verbose_name='课程周期（月)',default=5)
    #周期,课程周期
    outline=models.TextField(verbose_name='课程大纲')

    def __str__(self):
        return self.name




class Classlist(models.Model):

    #班级列表
    branch=models.ForeignKey('Branch',on_delete=models.CASCADE)
    course = models.ForeignKey('Course',on_delete=models.CASCADE)
    # 班级过来，一个班级一个课程
    class_type_choices=(
        (0,'脱产',
         (1,'周末'),
         (2,'网络'))
    )
    class_type=models.SmallIntegerField(default=0,choices=class_type_choices)
    semester = models.PositiveSmallIntegerField(verbose_name='学期')
    teachers = models.ManyToManyField('Userprofile', verbose_name='讲师')
    # 一个班级多个主讲师
    start_data = models.DateField('开班日期')
    # 字符串默认unicode，python2默认ascii
    graduate_date = models.DateField('毕业日期', blank=True, null=True)

    # 可以为空

    def __str__(self):
        return '%s(%s)期' % (self.course, self.semester)
        # 返回哪期学生毕业
        # 联合唯一，课程和学期联合起来是唯一的，全栈14，全栈15级等（钱买了那个是课程，后面的是学期）

    class Meta:
        unique_together = ('branch','class_type','course', 'semester')


class CourseRecode(models.Model):
    #课程记录



    class_grade=models.ForeignKey('Classlist',verbose_name='上课班级',on_delete=models.CASCADE)
    day_number=models.PositiveSmallIntegerField(verbose_name='课程节次')
    #第几天的课程
    teacher=models.ForeignKey('Userprofile',on_delete=models.CASCADE)
    #那个讲师教哪天课程
    title=models.CharField("本节课主题",max_length=64)
    content=models.TextField('本节课内容')
    has_homework=models.BooleanField('本节课作业',default=True)
    homework=models.TextField('作业需求',blank=True)
    data=models.DateTimeField(auto_now_add=True)
    #记录什么时候上的课，自增
    def __str__(self):
        return '%s第(%s)节'%(self.class_grade,self.day_number)
    class Meta:
        unique_together=('class_grade','day_number')
#班级和日期先关联




class StudyRecode(models.Model):
    #学习成绩记录

    course_record=models.ForeignKey('CourseRecode',on_delete=models.CASCADE)
    #一个学生关联一个课程
    student=models.ForeignKey('Student',on_delete=models.CASCADE)
    # 一个学生可以有多个上课记录
    score_choice=((100,'A+'),
                  (90,'A'),
                  (85,'B+'),
                  (80,'B'),
                  (70,'B-'),
                  (60,'c'),
                  (-50, 'null'),
                  (-100, 'copy'),
                  (0, '不可描述原因,未参加'))


    score=models.SmallIntegerField(choices=score_choice)
    show_choices=((0,'缺勤'),
                  (1,'已经签到'),
                  (2,'迟到'),
                  (3,'早退'),)

    show_status=models.SmallIntegerField(choices=show_choices,default=1)

    note=models.CharField('成绩备注',blank=True,null=True)
    data=models.DateTimeField(auto_now_add=True)
    def __str__(self):
        return  "%s %s %s"%(self.course_record,self.student,self.score)




class Branch(models.Model):

    #分区校区机构
    name=models.CharField(max_length=64,unique=True)
    addr=models.CharField(max_length=64)

    def __str__(self):
        return self.name


































